openapi: 3.0.3

###################################################################
# General                                                         #
###################################################################
info:
  version: 2.0.0
  title: Corbado Backend API
  description: |

    # Introduction
    This documentation gives an overview of all Corbado Backend API calls to implement passwordless authentication with Passkeys.

  contact:
    name: Corbado team
    email: support@corbado.com
    url: https://www.corbado.com

servers:
  - url: https://backendapi.corbado.io/v2

tags:
  - name: Users
    description: All API calls to manage users
  - name: Sessions
    description: All API calls to manage long and short sessions
  - name: Challenges
    description: All API calls to manage challenges
  - name: Identifiers
    description: All API calls to manage login identifiers
  - name: Passkeys
    description: All API calls for passkey flows
  - name: AuthEvents
    description: All API calls to manage authentication events
  - name: PasskeyEvents
    description: All API calls to manage passkey events
  - name: ProjectConfig
    description: All API calls to manage project configurations
  - name: ConnectTokens
    description: All API calls to manage connect tokens (they are used for Corbado Connect)
  - name: PasskeyChallenges
    description: All API calls to manage passkey challenges

paths:
  /users:
    post:
      description: Creates a new user
      operationId: UserCreate
      tags:
        - Users
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userCreateReq'
      responses:
        '200':
          description: User has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        default:
          $ref: '#/components/responses/error'

  /users/{userID}:
    get:
      description: Returns a user
      operationId: UserGet
      tags:
        - Users
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/userID'
      responses:
        '200':
          description: User has been returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        default:
          $ref: '#/components/responses/error'
    patch:
      description: Updates a user
      operationId: UserUpdate
      tags:
        - Users
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/userID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userUpdateReq'
      responses:
        '200':
          description: User has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        default:
          $ref: '#/components/responses/error'
    delete:
      description: Deletes a user
      operationId: UserDelete
      tags:
        - Users
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/userID'
      responses:
        '200':
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/error'

  /users/{userID}/longSessions:
    post:
      description: Create a new long session
      operationId: LongSessionCreate
      tags:
        - Sessions
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/userID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/longSessionCreateReq'
      responses:
        '200':
          description: Long session has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/longSession'
        default:
          $ref: '#/components/responses/error'

  /users/{userID}/longSessions/{longSessionID}:
    get:
      description: Retrieves a long session by ID and user ID
      operationId: UserLongSessionGet
      tags:
        - Sessions
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/userID'
        - $ref: '#/components/parameters/longSessionID'
      responses:
        '200':
          description: Long session has been returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/longSession'
        default:
          $ref: '#/components/responses/error'
    patch:
      description: Updates long session status
      operationId: LongSessionUpdate
      tags:
        - Sessions
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/userID'
        - $ref: '#/components/parameters/longSessionID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/longSessionUpdateReq'
      responses:
        '200':
          description: Long session has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/longSession'
        default:
          $ref: '#/components/responses/error'

  /users/{userID}/longSessions/{longSessionID}/shortSessions:
    post:
      description: Create a new short session
      operationId: ShortSessionCreate
      tags:
        - Sessions
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/userID'
        - $ref: '#/components/parameters/longSessionID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/shortSessionCreateReq'
      responses:
        '200':
          description: Short session has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/shortSession'
        default:
          $ref: '#/components/responses/error'

  /users/{userID}/challenges:
    post:
      description: Create a new challenge to verify a login identifier
      operationId: ChallengeCreate
      tags:
        - Challenges
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/userID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/challengeCreateReq'
      responses:
        '200':
          description: Challenge has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/challenge'
        default:
          $ref: '#/components/responses/error'

  /users/{userID}/challenges/{challengeID}:
    patch:
      description: Updates a challenge (e.g. from pending to completed)
      operationId: ChallengeUpdate
      tags:
        - Challenges
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/userID'
        - $ref: '#/components/parameters/challengeID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/challengeUpdateReq'
      responses:
        '200':
          description: Challenge has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/challenge'
        default:
          $ref: '#/components/responses/error'

  /users/{userID}/identifiers:
    post:
      description: Create a new login identifier
      operationId: IdentifierCreate
      tags:
        - Identifiers
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/userID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/identifierCreateReq'
      responses:
        '200':
          description: Identifier has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/identifier'
        default:
          $ref: '#/components/responses/error'

  /users/{userID}/identifiers/{identifierID}:
    delete:
      description: Delete an existing login identifier
      operationId: IdentifierDelete
      tags:
        - Identifiers
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/userID'
        - $ref: '#/components/parameters/identifierID'
      responses:
        '200':
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/error'
    patch:
      description: Updates a login identifier (e.g. from pending to verified)
      operationId: IdentifierUpdate
      tags:
        - Identifiers
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/userID'
        - $ref: '#/components/parameters/identifierID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/identifierUpdateReq'
      responses:
        '200':
          description: Identifier has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/identifier'
        default:
          $ref: '#/components/responses/error'

  /users/{userID}/socialAccounts:
    get:
      description: Returns a list of social accounts
      operationId: UserSocialAccountList
      tags:
        - Users
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/userID'
        - $ref: 'common.yml#/components/parameters/sort'
        - $ref: 'common.yml#/components/parameters/filter'
        - $ref: 'common.yml#/components/parameters/page'
        - $ref: 'common.yml#/components/parameters/pageSize'
      responses:
        '200':
          description: List of social accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/socialAccount'
        default:
          $ref: '#/components/responses/error'
    post:
      description: Creates a new social account
      operationId: SocialAccountCreate
      tags:
        - Users
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/userID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/socialAccountCreateReq'
      responses:
        '200':
          description: Social account has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/socialAccount'
        default:
          $ref: '#/components/responses/error'

  /users/{userID}/credentials:
    get:
      description: Returns a list of credentials (passkeys)
      operationId: CredentialList
      tags:
        - Users
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/userID'
        - $ref: 'common.yml#/components/parameters/sort'
        - $ref: 'common.yml#/components/parameters/filter'
        - $ref: 'common.yml#/components/parameters/page'
        - $ref: 'common.yml#/components/parameters/pageSize'
      responses:
        '200':
          description: List of credentials (passkeys)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credentialList'
        default:
          $ref: '#/components/responses/error'

  /users/{userID}/credentials/{credentialID}:
    delete:
      description: Deletes an existing credential (passkey)
      operationId: CredentialDelete
      tags:
        - Users
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/userID'
        - $ref: '#/components/parameters/credentialID'
      responses:
        '200':
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/error'

  /users/{userID}/authEvents:
    post:
      description: Create a new authentication event for a user
      operationId: AuthEventCreate
      tags:
        - AuthEvents
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/userID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authEventCreateReq'
      responses:
        '200':
          description: Auth event has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authEvent'
        default:
          $ref: '#/components/responses/error'

  /users/{userID}/passkeyEvents:
    post:
      description: Create a new passkey event for a user
      operationId: PasskeyEventCreate
      tags:
        - PasskeyEvents
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/userID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/passkeyEventCreateReq'
      responses:
        '200':
          description: Passkey event has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/passkeyEvent'
        default:
          $ref: '#/components/responses/error'
    get:
      description: Returns a list of matching passkey events
      operationId: PasskeyEventList
      tags:
        - PasskeyEvents
      security:
        - basicAuth: []
      parameters:
        - $ref: 'common.yml#/components/parameters/sort'
        - $ref: 'common.yml#/components/parameters/filter'
        - $ref: 'common.yml#/components/parameters/page'
        - $ref: 'common.yml#/components/parameters/pageSize'
        - $ref: '#/components/parameters/userID'
      responses:
        '200':
          description: List of all matching passkey events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/passkeyEventList'
        default:
          $ref: '#/components/responses/error'

  /users/{userID}/passkeyEvents/{passkeyEventID}:
    delete:
      description: Deletes an existing passkey event
      operationId: PasskeyEventDelete
      tags:
        - PasskeyEvents
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/userID'
        - $ref: '#/components/parameters/passkeyEventID'
      responses:
        '200':
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/error'

  /users/{userID}/passkeyChallenges:
    get:
      description: Returns a list of matching passkey challenges
      operationId: PasskeyChallengeList
      tags:
        - PasskeyChallenges
      security:
        - basicAuth: []
      parameters:
        - $ref: 'common.yml#/components/parameters/sort'
        - $ref: 'common.yml#/components/parameters/filter'
        - $ref: 'common.yml#/components/parameters/page'
        - $ref: 'common.yml#/components/parameters/pageSize'
        - $ref: '#/components/parameters/userID'
      responses:
        '200':
          description: List of all matching passkey challenges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/passkeyChallengeList'
        default:
          $ref: '#/components/responses/error'

  /users/{userID}/passkeyChallenges/{passkeyChallengeID}:
    patch:
      description: Updates a passkey challenge
      operationId: PasskeyChallengeUpdate
      tags:
        - PasskeyChallenges
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/userID'
        - $ref: '#/components/parameters/passkeyChallengeID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/passkeyChallengeUpdateReq'
      responses:
        '200':
          description: Passkey challenge has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/passkeyChallenge'
        default:
          $ref: '#/components/responses/error'

  /longSessions/{longSessionID}:
    get:
      description: Retrieves a long session by ID
      operationId: LongSessionGet
      tags:
        - Sessions
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/longSessionID'
      responses:
        '200':
          description: Long session has been returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/longSession'
        default:
          $ref: '#/components/responses/error'

  /identifiers:
    get:
      description: Returns a list of matching identifiers
      operationId: IdentifierList
      tags:
        - Identifiers
      security:
        - basicAuth: []
      parameters:
        - $ref: 'common.yml#/components/parameters/sort'
        - $ref: 'common.yml#/components/parameters/filter'
        - $ref: 'common.yml#/components/parameters/page'
        - $ref: 'common.yml#/components/parameters/pageSize'
      responses:
        '200':
          description: List of all matching identifiers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/identifierList'
        default:
          $ref: '#/components/responses/error'

  /socialAccounts:
    get:
      description: Returns a list of social accounts
      operationId: SocialAccountList
      tags:
        - Users
      security:
        - basicAuth: []
      parameters:
        - $ref: 'common.yml#/components/parameters/sort'
        - $ref: 'common.yml#/components/parameters/filter'
        - $ref: 'common.yml#/components/parameters/page'
        - $ref: 'common.yml#/components/parameters/pageSize'
      responses:
        '200':
          description: List of social accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/socialAccountList'
        default:
          $ref: '#/components/responses/error'

  /projectConfig/cname:
    put:
      description: Update project config CNAME and generates new SSL certificate
      operationId: ProjectConfigUpdateCNAME
      tags:
        - ProjectConfig
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/projectConfigUpdateCnameReq'
      responses:
        '200':
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/error'

  /connectTokens:
    post:
      description: Create a new connect token
      operationId: ConnectTokenCreate
      tags:
        - ConnectTokens
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/connectTokenCreateReq'
      responses:
        '200':
          description: Connect token has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connectToken'
        default:
          $ref: '#/components/responses/error'
    get:
      description: Returns a list of matching append tokens
      operationId: ConnectTokenList
      tags:
        - ConnectTokens
      security:
        - basicAuth: []
      parameters:
        - $ref: 'common.yml#/components/parameters/sort'
        - $ref: 'common.yml#/components/parameters/filter'
        - $ref: 'common.yml#/components/parameters/page'
        - $ref: 'common.yml#/components/parameters/pageSize'
      responses:
        '200':
          description: List of all matching append tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connectTokenList'
        default:
          $ref: '#/components/responses/error'

  /connectTokens/{connectTokenID}:
    patch:
      description: Updates an existing append token
      operationId: ConnectTokenUpdate
      tags:
        - ConnectTokens
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/connectTokenID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/connectTokenUpdateReq'
      responses:
        '200':
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/error'
    delete:
      description: Deletes an existing append token
      operationId: ConnectTokenDelete
      tags:
        - ConnectTokens
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/connectTokenID'
      responses:
        '200':
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/error'

  ###################################################################
  # Outliers (non-rest calls)                                       #
  ###################################################################

  /passkey/append/start:
    post:
      description: Starts a challenge for creating a new passkey
      operationId: PasskeyAppendStart
      tags:
        - Passkeys
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/passkeyAppendStartReq'
      responses:
        '200':
          description: Passkey append challenge has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/passkeyAppendStartRsp'
        default:
          $ref: '#/components/responses/error'

  /passkey/append/finish:
    post:
      description: Completes a challenge for creating a new passkey
      operationId: PasskeyAppendFinish
      tags:
        - Passkeys
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/passkeyAppendFinishReq'
      responses:
        '200':
          description: Passkey append succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/passkeyAppendFinishRsp'
        default:
          $ref: '#/components/responses/error'

  /passkey/login/start:
    post:
      description: Starts a challenge for an existing passkey
      operationId: PasskeyLoginStart
      tags:
        - Passkeys
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/passkeyLoginStartReq'
      responses:
        '200':
          description: Passkey login challenge has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/passkeyLoginStartRsp'
        default:
          $ref: '#/components/responses/error'

  /passkey/login/finish:
    post:
      description: Completes a challenge for an existing passkey
      operationId: PasskeyLoginFinish
      tags:
        - Passkeys
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/passkeyLoginFinishReq'
      responses:
        '200':
          description: Passkey login succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/passkeyLoginFinishRsp'
        default:
          $ref: '#/components/responses/error'

  /passkey/mediation/start:
    post:
      description: Starts a challenge for an existing passkey (Conditional UI)
      operationId: PasskeyMediationStart
      tags:
        - Passkeys
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/passkeyMediationStartReq'
      responses:
        '200':
          description: Passkey login challenge has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/passkeyMediationStartRsp'
        default:
          $ref: '#/components/responses/error'

  /passkey/mediation/finish:
    post:
      description: Completes a challenge for an existing passkey (Conditional UI)
      operationId: PasskeyMediationFinish
      tags:
        - Passkeys
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/passkeyMediationFinishReq'
      responses:
        '200':
          description: Passkey mediation has been success, thus we can return a userID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/passkeyMediationFinishRsp'
        default:
          $ref: '#/components/responses/error'

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

  parameters:
    userID:
      name: userID
      in: path
      description: ID of user
      required: true
      schema:
        type: string

    challengeID:
      name: challengeID
      in: path
      description: ID of challenge
      required: true
      schema:
        type: string

    longSessionID:
      name: longSessionID
      in: path
      description: ID of long session
      required: true
      schema:
        type: string

    identifierID:
      name: identifierID
      in: path
      description: ID of login identifier
      required: true
      schema:
        type: string

    credentialID:
      name: credentialID
      in: path
      description: ID of credential
      required: true
      schema:
        type: string

    connectTokenID:
      name: connectTokenID
      in: path
      description: ID of an append token
      required: true
      schema:
        type: string

    passkeyChallengeID:
      name: passkeyChallengeID
      in: path
      description: ID of a passkey challenge
      required: true
      schema:
        type: string

    passkeyEventID:
      name: passkeyEventID
      in: path
      description: ID of a passkey event
      required: true
      schema:
        type: string

  schemas:
    ###################################################################
    # Request/Response bodies                                         #
    ###################################################################
    userCreateReq:
      type: object
      required:
        - status
      properties:
        fullName:
          type: string
        status:
          $ref: '#/components/schemas/userStatus'
        explicitWebauthnID:
          type: string
          description: For connect projects, the webauthnID can be explicitly set for a user

    userUpdateReq:
      type: object
      properties:
        fullName:
          type: string
        status:
          $ref: '#/components/schemas/userStatus'

    longSessionCreateReq:
      type: object
      required:
        - appType
        - identifierValue
      properties:
        appType:
          $ref: 'common.yml#/components/schemas/appType'
        identifierValue:
          type: string

    longSessionUpdateReq:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/longSessionStatus'

    shortSessionCreateReq:
      type: object
      required:
        - appType
        - issuer
      properties:
        appType:
          $ref: 'common.yml#/components/schemas/appType'
        issuer:
          type: string

    challengeCreateReq:
      type: object
      required:
        - challengeType
        - identifierValue
        - clientInformation
      properties:
        challengeType:
          $ref: '#/components/schemas/challengeType'
        identifierValue:
          type: string
        challengeMetadata:
          type: object
        clientInformation:
          $ref: '#/components/schemas/clientInformation'

    challengeUpdateReq:
      type: object
      required:
        - value
      properties:
        value:
          type: string

    identifierCreateReq:
      type: object
      required:
        - identifierType
        - identifierValue
        - status
      properties:
        identifierType:
          $ref: '#/components/schemas/identifierType'
        identifierValue:
          type: string
        status:
          $ref: '#/components/schemas/identifierStatus'

    identifierUpdateReq:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/identifierStatus'

    passkeyAppendStartReq:
      type: object
      required:
        - userID
        - processID
        - username
        - clientInformation
        - passkeyIntelFlags
      properties:
        userID:
          $ref: 'common.yml#/components/schemas/userID'
        processID:
          type: string
        username:
          type: string
        clientInformation:
          $ref: '#/components/schemas/clientInformation'
        passkeyIntelFlags:
          $ref: '#/components/schemas/passkeyIntelFlags'

    passkeyAppendStartRsp:
      type: object
      required:
        - appendAllow
        - detectionTags
        - decisionTag
        - credentialCount
        - attestationOptions
      properties:
        appendAllow:
          type: boolean
        detectionTags:
          type: array
          items:
            $ref: '#/components/schemas/detectionTag'
        decisionTag:
          $ref: '#/components/schemas/decisionTag'
        credentialCount:
          type: integer
        attestationOptions:
          type: string
          example: '{"publicKey":{"challenge":"2m6...0w9/MgW...KE=","rp":{"name":"demo","id":"localhost"},"user":{"name":"example@mail.com","id":"dXN...zk5"},"pubKeyCredParams":[{"type":"public-key","alg":-7},{"type":"public-key","alg":-35},{"type":"public-key","alg":-36},{"type":"public-key","alg":-257},{"type":"public-key","alg":-258},{"type":"public-key","alg":-259},{"type":"public-key","alg":-37},{"type":"public-key","alg":-38},{"type":"public-key","alg":-39},{"type":"public-key","alg":-8}],"authenticatorSelection":{"authenticatorAttachment":"platform","requireResidentKey":false,"userVerification":"required"},"timeout":60000,"attestation":"none"}}'

    passkeyAppendFinishReq:
      type: object
      required:
        - userID
        - processID
        - attestationResponse
        - clientInformation
      properties:
        userID:
          $ref: 'common.yml#/components/schemas/userID'
        processID:
          type: string
        attestationResponse:
          type: string
          example: '{"type":"public-key","id":"JM6...J_Q","rawId":"JM6...J_Q","authenticatorAttachment":null,"response":{"clientDataJSON":"eyJ...ZX0","authenticatorData":"SZY...AAQ","signature":"Ni7...YAg","userHandle":"dXN...zk5"},"clientExtensionResults":{}}'
        clientInformation:
          $ref: '#/components/schemas/clientInformation'
        sendNotification:
          type: boolean

    passkeyAppendFinishRsp:
      type: object
      required:
        - passkeyData
      properties:
        passkeyData:
          $ref: '#/components/schemas/passkeyData'

    passkeyLoginStartReq:
      type: object
      required:
        - userID
        - clientInformation
        - crossDeviceAuthenticationStrategy
        - processID
      properties:
        userID:
          $ref: 'common.yml#/components/schemas/userID'
        clientInformation:
          $ref: '#/components/schemas/clientInformation'
        crossDeviceAuthenticationStrategy:
          $ref: '#/components/schemas/crossDeviceAuthenticationStrategy'
        processID:
          type: string

    passkeyLoginStartRsp:
      type: object
      required:
        - loginAllow
        - detectionTags
        - decisionTag
        - credentialCount
        - assertionOptions
        - isCDACandidate
      properties:
        loginAllow:
          type: boolean
        detectionTags:
          type: array
          items:
            $ref: '#/components/schemas/detectionTag'
        decisionTag:
          $ref: '#/components/schemas/decisionTag'
        credentialCount:
          type: integer
        assertionOptions:
          type: string
        isCDACandidate:
          type: boolean

    passkeyLoginFinishReq:
      type: object
      required:
        - userID
        - assertionResponse
        - clientInformation
        - processID
      properties:
        userID:
          $ref: 'common.yml#/components/schemas/userID'
        assertionResponse:
          type: string
        clientInformation:
          $ref: '#/components/schemas/clientInformation'
        processID:
          type: string

    passkeyLoginFinishRsp:
      type: object
      required:
        - passkeyData
      properties:
        passkeyData:
          $ref: '#/components/schemas/passkeyData'

    passkeyMediationStartReq:
      type: object
      required:
        - clientInformation
      properties:
        clientInformation:
          $ref: '#/components/schemas/clientInformation'

    passkeyMediationStartRsp:
      type: object
      required:
        - loginAllow
        - assertionOptions
      properties:
        loginAllow:
          type: boolean
        assertionOptions:
          type: string

    passkeyMediationFinishReq:
      type: object
      required:
        - assertionResponse
        - clientInformation
        - processID
      properties:
        assertionResponse:
          type: string
        clientInformation:
          $ref: '#/components/schemas/clientInformation'
        processID:
          type: string

    passkeyMediationFinishRsp:
      type: object
      required:
        - passkeyData
      properties:
        passkeyData:
          $ref: '#/components/schemas/passkeyData'

    connectTokenCreateReq:
      type: object
      required:
        - type
        - data
      properties:
        type:
          $ref: '#/components/schemas/connectTokenType'
        data:
          $ref: '#/components/schemas/connectTokenData'
        maxLifetimeInSeconds:
          type: integer
          example: 3600

    connectTokenUpdateReq:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/connectTokenStatus'

    ###################################################################
    # Entities                                                        #
    ###################################################################

    passkeyData:
      type: object
      required:
        - id
        - userID
        - username
        - ceremonyType
        - challengeID
      properties:
        id:
          type: string
        userID:
          type: string
        username:
          type: string
        ceremonyType:
          type: string
          enum: ['local', 'cda', 'security-key']
        challengeID:
          type: string

    user:
      type: object
      required:
        - userID
        - status
      properties:
        userID:
          type: string
        fullName:
          type: string
        status:
          $ref: '#/components/schemas/userStatus'
        explicitWebauthnID:
          type: string

    longSession:
      type: object
      required:
        - longSessionID
        - userID
        - identifierValue
        - status
        - expires
      properties:
        longSessionID:
          type: string
        userID:
          type: string
        identifierValue:
          type: string
        status:
          $ref: '#/components/schemas/longSessionStatus'
        expires:
          type: string

    shortSession:
      type: object
      required:
        - value
      properties:
        value:
          type: string

    identifier:
      type: object
      required:
        - identifierID
        - type
        - value
        - status
        - userID
      properties:
        identifierID:
          type: string
        type:
          $ref: '#/components/schemas/identifierType'
        value:
          type: string
        status:
          $ref: '#/components/schemas/identifierStatus'
        userID:
          type: string

    identifierList:
      type: object
      required:
        - identifiers
        - paging
      properties:
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/identifier'
        paging:
          $ref: 'common.yml#/components/schemas/paging'

    socialAccountCreateReq:
      type: object
      required:
        - providerType
        - identifierValue
        - foreignID
        - avatarURL
        - fullName
      properties:
        providerType:
          $ref: 'common.yml#/components/schemas/socialProviderType'
        identifierValue:
          type: string
        foreignID:
          type: string
        avatarURL:
          type: string
        fullName:
          type: string

    socialAccount:
      type: object
      required:
        - socialAccountID
        - providerType
        - identifierValue
        - userID
        - foreignID
        - avatarURL
        - fullName
      properties:
        socialAccountID:
          type: string
        providerType:
          type: string
        identifierValue:
          type: string
        userID:
          type: string
        foreignID:
          type: string
        avatarURL:
          type: string
        fullName:
          type: string

    socialAccountList:
      type: object
      required:
        - socialAccounts
        - paging
      properties:
        socialAccounts:
          type: array
          items:
            $ref: '#/components/schemas/socialAccount'
        paging:
          $ref: 'common.yml#/components/schemas/paging'

    credential:
      type: object
      required:
        - id
        - credentialID
        - attestationType
        - transport
        - backupEligible
        - backupState
        - authenticatorAAGUID
        - sourceOS
        - sourceBrowser
        - lastUsed
        - created
        - status
      properties:
        id:
          type: string
          example: 'cre-12345'
        credentialID:
          type: string
        attestationType:
          type: string
        transport:
          type: array
          items:
            type: string
            enum: ['usb', 'nfc', 'ble', 'internal', 'hybrid', 'smart-card']
        backupEligible:
          type: boolean
        backupState:
          type: boolean
        authenticatorAAGUID:
          type: string
        sourceOS:
          type: string
        sourceBrowser:
          type: string
        lastUsed:
          type: string
          description: Timestamp of when the passkey was last used in yyyy-MM-dd'T'HH:mm:ss format
        created:
          $ref: 'common.yml#/components/schemas/created'
        status:
          type: string
          enum: ['pending', 'active']
          description: 'Status'

    credentialList:
      type: object
      required:
        - credentials
        - paging
      properties:
        credentials:
          type: array
          items:
            $ref: '#/components/schemas/credential'
        paging:
          $ref: 'common.yml#/components/schemas/paging'

    challenge:
      type: object
      required:
        - challengeID
        - type
        - identifierValue
        - value
        - status
      properties:
        challengeID:
          type: string
        type:
          $ref: '#/components/schemas/challengeType'
        identifierValue:
          type: string
        value:
          type: string
        status:
          $ref: '#/components/schemas/challengeStatus'

    authEventCreateReq:
      type: object
      required:
        - username
        - eventType
        - method
        - status
        - clientInformation
      properties:
        username:
          type: string
        eventType:
          $ref: '#/components/schemas/authEventType'
        method:
          $ref: '#/components/schemas/authEventMethod'
        status:
          $ref: '#/components/schemas/authEventStatus'
        clientInformation:
          $ref: '#/components/schemas/clientInformation'

    authEvent:
      type: object
      required:
        - authEventID
        - userID
        - username
        - eventType
        - method
        - created
        - status
      properties:
        authEventID:
          type: string
        userID:
          $ref: 'common.yml#/components/schemas/userID'
        username:
          type: string
        eventType:
          $ref: '#/components/schemas/authEventType'
        method:
          $ref: '#/components/schemas/authEventMethod'
        created:
          $ref: 'common.yml#/components/schemas/created'
        status:
          $ref: '#/components/schemas/authEventStatus'

    passkeyEventCreateReq:
      type: object
      required:
        - eventType
      properties:
        eventType:
          $ref: '#/components/schemas/passkeyEventType'
        expires:
          type: integer
        processID:
          type: string
        clientEnvID:
          type: string
        credentialID:
          type: string

    passkeyEvent:
      type: object
      required:
        - passkeyEventID
        - userID
        - eventType
        - created
      properties:
        passkeyEventID:
          type: string
        userID:
          $ref: 'common.yml#/components/schemas/userID'
        eventType:
          $ref: '#/components/schemas/passkeyEventType'
        clientEnvID:
          type: string
        processID:
          type: string
        credentialID:
          type: string
        expires:
          type: integer
        created:
          $ref: 'common.yml#/components/schemas/created'

    passkeyEventList:
      type: object
      required:
        - passkeyEvents
        - paging
      properties:
        passkeyEvents:
          type: array
          items:
            $ref: '#/components/schemas/passkeyEvent'
        paging:
          $ref: 'common.yml#/components/schemas/paging'

    projectConfigUpdateCnameReq:
      type: object
      required:
        - cname
      properties:
        cname:
          type: string

    detectionTag:
      type: object
      required:
        - category
        - name
      properties:
        category:
          type: string
          enum: ['support', 'clientEnv', 'history', 'passkey']
        name:
          type: string

    decisionTag:
      type: string
      enum:
        - env-no-pk-support
        - user-no-pks
        - user-login-blacklisted
        - user-security-key
        - user-positive-env-history
        - user-negative-env-history
        - env-blacklisted
        - user-platform-pk-high-confidence
        - user-cross-platform-pk-high-confidence
        - user-env-no-pks
        - default-deny
        - passkey-list-initiated-process
        - user-append-blacklisted
        - process-pk-login-sk-completed
        - process-pk-login-platform-completed
        - process-pk-login-not-offered
        - process-pk-login-incomplete
        - process-pk-login-cross-platform-completed
        - device-local-platform-passkey-experiment

    clientInformation:
      type: object
      required:
        - remoteAddress
        - userAgent
        - userVerifyingPlatformAuthenticatorAvailable
        - conditionalMediationAvailable
      properties:
        remoteAddress:
          description: Client's IP address
          type: string
          example: '::ffff:172.18.0.1'
        userAgent:
          description: Client's user agent
          type: string
          example: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36'
        clientEnvHandle:
          description: Client's environment handle
          type: string
        javascriptFingerprint:
          description: Client's fingerprint
          type: string
        javaScriptHighEntropy:
          $ref: '#/components/schemas/javaScriptHighEntropy'
        bluetoothAvailable:
          description: Client's Bluetooth availability
          type: boolean
        passwordManagerAvailable:
          description: Client's password manager availability
          type: boolean
        userVerifyingPlatformAuthenticatorAvailable:
          type: boolean
        conditionalMediationAvailable:
          type: boolean

    passkeyIntelFlags:
      type: object
      required:
        - forcePasskeyAppend
      properties:
        forcePasskeyAppend:
          type: boolean

    javaScriptHighEntropy:
      type: object
      required:
        - platform
        - platformVersion
        - mobile
      properties:
        platform:
          type: string
        platformVersion:
          type: string
        mobile:
          type: boolean

    passkeyChallengeUpdateReq:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/passkeyChallengeStatus'

    passkeyChallengeList:
      type: object
      required:
        - passkeyChallenges
        - paging
      properties:
        passkeyChallenges:
          type: array
          items:
            $ref: '#/components/schemas/passkeyChallenge'
        paging:
          $ref: 'common.yml#/components/schemas/paging'

    passkeyChallenge:
      type: object
      required:
        - challengeID
        - type
        - value
        - status
        - created
        - expires
      properties:
        challengeID:
          type: string
        type:
          $ref: '#/components/schemas/passkeyChallengeType'
        value:
          type: string
        status:
          $ref: '#/components/schemas/passkeyChallengeStatus'
        created:
          type: integer
          format: int64
        expires:
          type: integer
          format: int64

    passkeyChallengeType:
      type: string
      enum: ['register', 'authenticate']

    passkeyChallengeStatus:
      type: string
      enum: ['pending', 'completed', 'consumed']

    userStatus:
      type: string
      enum: ['pending', 'active', 'disabled']

    longSessionStatus:
      type: string
      enum: ['active', 'logged_out', 'expired', 'inactivity_reached', 'revoked']

    challengeType:
      type: string
      enum: ['email_otp', 'email_link', 'sms_otp']

    challengeStatus:
      type: string
      enum: ['pending', 'completed', 'expired']

    identifierType:
      type: string
      enum: ['email', 'phone', 'username']

    identifierStatus:
      type: string
      enum: ['pending', 'primary', 'verified']

    crossDeviceAuthenticationStrategy:
      type: string
      enum: ['standard', 'minimize', 'maximize']

    connectTokenStatus:
      type: string
      enum: ['initial', 'consumed']

    connectTokenType:
      type: string
      enum: ['passkey-append', 'passkey-delete', 'passkey-list']

    authEventMethod:
      type: string
      enum:
        [
          'password',
          'email_otp',
          'email_link',
          'phone_otp',
          'passkey',
          'social_github',
          'social_google',
          'social_microsoft',
        ]

    authEventType:
      type: string
      enum: ['sign_up', 'login', 'new_passkey_added']

    authEventStatus:
      type: string
      enum: ['success', 'failure']

    passkeyEventType:
      type: string
      enum:
        - user-login-blacklisted
        - login-explicit-abort
        - login-error
        - login-one-tap-switch
        - user-append-after-cross-platform-blacklisted
        - user-append-after-login-error-blacklisted
        - append-credential-exists
        - append-explicit-abort
        - append-error

    connectToken:
      type: object
      required:
        - id
        - tokenType
        - data
        - connectTokenStatus
        - expires
      properties:
        id:
          type: string
        tokenType:
          $ref: '#/components/schemas/connectTokenType'
        data:
          $ref: '#/components/schemas/connectTokenData'
        connectTokenStatus:
          $ref: '#/components/schemas/connectTokenStatus'
        secret:
          type: string
        expires:
          type: integer

    connectTokenDataPasskeyAppend:
      type: object
      required:
        - displayName
        - identifier
      properties:
        displayName:
          type: string
        identifier:
          type: string

    connectTokenDataPasskeyDelete:
      type: object
      required:
        - identifier
      properties:
        identifier:
          type: string

    connectTokenDataPasskeyList:
      type: object
      required:
        - identifier
      properties:
        identifier:
          type: string

    connectTokenData:
      type: object
      oneOf:
        - $ref: '#/components/schemas/connectTokenDataPasskeyAppend'
        - $ref: '#/components/schemas/connectTokenDataPasskeyDelete'
        - $ref: '#/components/schemas/connectTokenDataPasskeyList'

    connectTokenList:
      type: object
      required:
        - connectTokens
        - paging
      properties:
        connectTokens:
          type: array
          items:
            $ref: '#/components/schemas/connectToken'
        paging:
          $ref: 'common.yml#/components/schemas/paging'

  responses:
    ###################################################################
    # Responses: Error                                                #
    ###################################################################
    error:
      description: Error
      content:
        application/json:
          schema:
            $ref: 'common.yml#/components/schemas/errorRsp'
    '200':
      description: Operation succeeded
      content:
        application/json:
          schema:
            $ref: 'common.yml#/components/schemas/genericRsp'

###################################################################
# Security                                                        #
###################################################################
security:
  - basicAuth: []

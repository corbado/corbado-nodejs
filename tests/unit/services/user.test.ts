// Generated by CodiumAI

import axios from 'axios';
import MockAdapter from 'axios-mock-adapter';
import { BaseError } from '../../../src/errors';
import { UserApi, UserCreateReq, UserDeleteReq } from '../../../src/generated';
import { User } from '../../../src/services';
import Utils from '../../utils';

describe('code snippet', () => {
  // User.create() successfully creates a user and returns UserCreateRsp
  it('should create a user and return UserCreateRsp when User.create() is called with valid request', async () => {
    // Mock dependencies
    const axiosInstance = axios.create();
    const mock = new MockAdapter(axiosInstance);
    mock.onPost('/smsCodeSend').reply(200, {
      data: {
        httpStatusCode: 200,
        message: 'success',
        requestData: { requestID: '123', link: 'http://localhost' },
        runtime: 0,
        data: {},
      },
    });
    // const UserApiMock = jest.fn().mockImplementation(() => ({
    //   userCreate: jest.fn().mockResolvedValueOnce({ data: {} }),
    // }));

    // Initialize code-under-test
    // const axiosMock = axiosInstanceMock as AxiosInstance;
    // const UserApi = UserApiMock as jest.MockedClass<typeof UserApi>;
    const user = new User(axiosInstance);

    // Prepare test data
    const req = { name: Utils.createRandomTestName() };

    // Invoke code-under-test
    const result = await user.create(req);

    // Verify result
    expect(result).toEqual({});

    // Verify dependencies
    // expect(UserApi).toHaveBeenCalledTimes(1);
    // expect(UserApi).toHaveBeenCalledWith(undefined, '', axiosMock);
    // expect(UserApiMock.mock.instances[0].userCreate).toHaveBeenCalledTimes(1);
    // expect(UserApiMock.mock.instances[0].userCreate).toHaveBeenCalledWith(req);
  });

  // User.delete() successfully deletes a user and returns GenericRsp
  it('should delete a user and return GenericRsp when User.delete() is called with valid id and request', async () => {
    // Mock dependencies
    const axiosInstance = axios.create();
    const mock = new MockAdapter(axiosInstance);
    mock.onPost('/smsCodeSend').reply(200, {
      data: {
        httpStatusCode: 200,
        message: 'success',
        requestData: { requestID: '123', link: 'http://localhost' },
        runtime: 0,
        data: {},
      },
    });
    const user = new User(axiosInstance);

    // Prepare test data
    const id = '123';
    const req = {} as UserDeleteReq;

    // Invoke code-under-test
    const result = await user.delete(id, req);

    // Verify result
    expect(result).toEqual({});

    // Verify dependencies
    // expect(UserApi).toHaveBeenCalledTimes(1);
    // expect(UserApi).toHaveBeenCalledWith(undefined, '', axiosMock);
    // expect(UserApiMock.mock.instances[0].userDelete).toHaveBeenCalledTimes(1);
    // expect(UserApiMock.mock.instances[0].userDelete).toHaveBeenCalledWith(id, req);
  });

  // User.get() successfully retrieves a user and returns UserGetRsp
  it('should retrieve a user and return UserGetRsp when User.get() is called with valid id and optional parameters', async () => {
    // Mock dependencies
    const axiosInstance = axios.create();
    const mock = new MockAdapter(axiosInstance);
    mock.onPost('/smsCodeSend').reply(200, {
      data: {
        httpStatusCode: 200,
        message: 'success',
        requestData: { requestID: '123', link: 'http://localhost' },
        runtime: 0,
        data: {},
      },
    });
    const user = new User(axiosInstance);

    // Prepare test data
    const id = '123';
    const remoteAddr = '127.0.0.1';
    const userAgent = 'Mozilla/5.0';

    // Invoke code-under-test
    const result = await user.get(id, remoteAddr, userAgent);

    // Verify result
    expect(result).toEqual({});

    // Verify dependencies
    // expect(UserApi).toHaveBeenCalledTimes(1);
    // expect(UserApi).toHaveBeenCalledWith(undefined, '', axiosMock);
    // expect(UserApiMock.mock.instances[0].userGet).toHaveBeenCalledTimes(1);
    // expect(UserApiMock.mock.instances[0].userGet).toHaveBeenCalledWith(id, remoteAddr, userAgent);
  });

  // User.create() throws BaseError if UserApi.userCreate() returns an ErrorRsp
  it('should throw BaseError when User.create() is called and UserApi.userCreate() returns an ErrorRsp', async () => {
    const axiosInstance = axios.create();
    const mock = new MockAdapter(axiosInstance);
    mock.onPost('/smsCodeSend').reply(200, {
      data: {
        httpStatusCode: 200,
        message: 'success',
        requestData: { requestID: '123', link: 'http://localhost' },
        runtime: 0,
        data: {},
      },
    });
    const user = new User(axiosInstance);

    // Prepare test data
    const req = {} as UserCreateReq;

    // Invoke code-under-test and verify error
    await expect(user.create(req)).rejects.toThrow(BaseError);

    // Verify dependencies
  });
});
